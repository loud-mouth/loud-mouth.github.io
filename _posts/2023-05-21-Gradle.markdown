---
layout: post
author: Anant
---
Because once my mentor said, "Maven? Can't you convert this into Gradle real quick?"

<blockquote>
 <p class="no-print"><b>Go to:</b>
  <a href="#the-file-structure-of-a-gradle-project">File Structure in Gradle</a> |
  <a href="#depedencies-plugins-and-what-else">Dependencies & Plugins</a> |
  <a href="#project-lombok-integration-with-gradle">Lombok + Gradle</a> |
  <a href="#spotless---prettier-for-java-integration-with-gradle">Spotless + Gradle</a>
 </p>
</blockquote>

### The file structure of a Gradle project
`build.gradle`: This file is the heart of a Gradle project. It defines the project configuration, dependencies, and build tasks using the Groovy or Kotlin DSL (Domain-Specific Language). It specifies the plugins to apply, repositories for dependency resolution, task definitions, and various project settings.

`settings.gradle`: This file configures the Gradle settings for the project. It specifies the project's name, included modules, and other global settings. If you have a multi-module project, this file is used to define the project structure and modules.

`gradle`: This directory contains the Gradle Wrapper files. The Gradle Wrapper allows developers to use a specific version of Gradle without having to install it globally. It includes files such as gradlew (Unix) and gradlew.bat (Windows), along with a gradle/wrapper directory containing the wrapper JAR file and properties.

`src`: This directory is the root directory for source code and resources.

`src/main`: This directory contains the main source code and resources of your project.

`src/main/java`: This directory is for placing your Java source code.
`src/main/resources`: This directory is for placing non-Java resources (e.g., configuration files, property files, XML files) that are required for your application.

`src/test`: This directory contains the test source code and resources for your project.
`src/test/java`: This directory is for placing your test source code.
`src/test/resources`: This directory is for placing test-specific resources.

`build`: This directory is created by Gradle during the build process. It contains the output files generated by the build, such as compiled classes, JAR files, and other build artifacts. It also includes intermediate build files and directories used by Gradle during the build process.

`gradle.properties`: This file allows you to configure various project-specific properties that can be used in the build.gradle file or other Gradle scripts. For example, you can define custom properties, specify system properties, or configure build-related settings.

`gradlew` and `gradlew.bat`: These are script files for running Gradle tasks using the Gradle Wrapper. They allow you to execute Gradle commands without requiring a globally installed Gradle distribution.


### The `build.gradle` file, and its many tantrums
Typically, each module inside a project has its own `build.gradle` file.
 <!--TODO: write from gradle docs -->

### Depedencies, Plugins and What Else
In Gradle, dependencies and plugins serve different purposes:

Dependencies: Dependencies are external libraries or modules that your project relies on to compile, run, or test your code. They provide additional functionality or resources that your project needs. Dependencies are declared in the dependencies block of your Gradle build script (build.gradle or build.gradle.kts), specifying the libraries and their versions that your project requires. Gradle fetches these dependencies from repositories and makes them available for your project to use. Dependencies can be categorized into compile-time dependencies, runtime dependencies, and test dependencies.

Plugins: Plugins in Gradle are used to extend the build process and provide additional functionality to your project. They allow you to perform various tasks such as code compilation, test execution, deployment, static analysis, and more. Plugins can define new tasks, configurations, and conventions specific to a certain functionality or domain. Gradle provides a rich ecosystem of plugins that can be applied to your project. Plugins are declared in the plugins block of your Gradle build script, and they can be either built-in plugins that come with Gradle or custom plugins defined by you or others.

In summary, dependencies are used to declare external libraries or modules that your project depends on, while plugins are used to extend the build process and provide additional functionality to your Gradle project. Dependencies are declared in the dependencies block, and plugins are declared in the plugins block of your Gradle build script.

### Project Lombok Integration with Gradle
Yes, for Lombok, there is both a plugin and a dependency involved in its configuration.

Lombok Plugin: The Lombok plugin is applied to your Gradle project to enable Lombok's annotation processing. The plugin provides tasks and configurations that integrate with Gradle's build process. It handles the generation of boilerplate code based on Lombok annotations, such as getters, setters, constructors, and more. The Lombok plugin is applied in the plugins block of your Gradle build script, typically with the id of "io.freefair.lombok".

Lombok Dependency: The Lombok dependency is required to compile and run your code that uses Lombok annotations. It provides the Lombok library containing the necessary classes and utilities for the annotations to work correctly. The Lombok dependency is declared in the dependencies block of your Gradle build script, typically with the implementation or compileOnly configuration and the appropriate version.

Here's an example of how the Lombok plugin and dependency can be configured in a Gradle build script:

groovy
Copy code

{% include codeblocks.html content="plugins {
    id 'java'
    id 'io.freefair.lombok' version 'x.y.z'  // Apply the Lombok plugin
}

dependencies {
    implementation 'org.projectlombok:lombok:x.y.z'  // Declare the Lombok dependency
}

// Other configurations and tasks..." language="groovy" %}

Make sure to replace 'x.y.z' with the appropriate version number of Lombok you want to use.

And no, you cannot use only the Lombok plugin without the Lombok dependency. The Lombok plugin is responsible for enabling Lombok's annotation processing during the build process, but the Lombok library (dependency) is required to provide the actual implementation of Lombok's features.

The Lombok plugin integrates with the Java compiler to perform annotation processing and generate the necessary code based on Lombok annotations. However, without the Lombok library on the classpath, the generated code will not have the corresponding classes and utilities provided by Lombok, and you will encounter compilation errors when using Lombok annotations in your code.

Therefore, it is necessary to include both the Lombok plugin and the Lombok dependency in your Gradle configuration to successfully utilize Lombok's features. Install the Lombok extension from the IDEA Intellij Plugins Marketplace into your IDE as well.

### Spotless - Prettier for Java Integration with Gradle

To include Spotless in our gradle project:

{% include codeblocks.html content="plugins {
    // other dependencies
    id 'com.diffplug.spotless' version '6.18.0'
}

dependencies {
    // other dependencies
    implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.18.0'
}" language="groovy" %}

For some reason, the task (`./gradlew spotlessApply`) wasn't getting executed (in fact even the dependency itself wasn't downloaded until I ran the task from dedicated tasks window `Cmd + Enter` from terminal after typing the command out. After that I can run it from anywhere.)

The following properties were set for formatter in the `build.gradle` file.

{% include codeblocks.html content="spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(7)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'xml', {
        target fileTree('.') {
            include '**/*.xml'
            exclude '**/build/**', '**/build-*/**'
        }
        eclipseWtp('xml')
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}" language="groovy" %}

Some sources mention to put the config in a separate `spotless.build` file but for me it was not working.

<!-- TODO: Add JUnit for Gradle -->