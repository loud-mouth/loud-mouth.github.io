---
layout: post
author: Anant
---

Today I'll be covering the basic ins and outs of git that I have personally become accustomed to.

As far as I understand, while working on a personal projects, there will be 3 versions at a time, your local version of the branch you are working on, a remote server version of the branch on git servers and a copy of that remote branch on your local computer that may or may not be up-to-date with the remote server branch.

## What is Git Remote
The git remote command lets you create, view, and delete connections to other repositories. Remote connections are more like bookmarks rather than direct links into other repositories.

They are convinient names that can be used to reference a not-so-convinient URL.
You can make remote connections to the central repo, as well as to a friend's repo.

The `git remote` command is used to manage the list of remote entries stored in `./.git/config` file.
The command `git remote -v` can be used to check the list, and see which URLs are pointed to by them.

### Creating an entry in `./.git/config` file

Use `git remote add <name> <url>` to add a link.

When you clone a repository using the git clone command, Git automatically adds a remote named origin that points to the repository you just cloned. By default, the origin remote points to the repository that you cloned from, and it is used as the default remote for fetching and pushing changes. When you run Git commands that reference origin, such as git fetch origin or git push origin, Git knows to use the URL of the remote repository that you cloned from. You can remove and rename these connections.


## Git Stash
Working on 2 branches simultaneously means you'll have to switch back and forth between them sometimes. Here's how to do it.

With `git stash` you can save your current progress in branch, which is something you're required to do before switching to a different branch. Use `git stash pop` to unstash the changes later when you come back.

## For when you've committed too early (but not pushed) 
In this case, you can keep making further edits in the same branch and at the end stage the current changes with `git add .` and use `git commit --amend` with new commit message to bundle all the changes together into a single commit.

## Wait, you also pushed?
If you have pushed the partial changes already and want to modify the previous commit along with additional changes, you have a couple of options. However, keep in mind that modifying the commit history that has already been pushed can cause issues if other collaborators have based their work on those commits. It's generally recommended to avoid modifying the commit history that has been pushed unless you have a specific need.

It is probaby better just to make a new commit. The other option is to use an interactive rebase.

